@startuml

class TelegramProperties{
    + token: String
}

abstract class TelegramBotClient {
    - properties: TelegramProperties
    - bot: Bot
    - handleAnyMessage()
    + sendMessage(chatId: ChatId, text: String)
    # processAnyMessage(incomeMessage: String): List<String>
}

TelegramProperties o- TelegramBotClient

interface WordDefinitionMessageBuilder {
    buildMessage(wordDefinition: WordDefinition): String
}

interface DictionaryResource {
    findWordDefinition(word: String): List<WordDefinition>
}

together {
    class VocabotService extends TelegramBotClient {
        -dictionary: DictionaryResource
        -messageBuilder: WordDefinitionMessageBuilder
        # processAnyMessage(incomeMessage: String): List<String>
    }

    VocabotService o- FreeDictionaryResource
    VocabotService o- TelegramWordDefinitionMessageBuilder

    entity WordDefinition {
        +word: String
        +phonetic: Phonetic?
        +definitions: List<Definition>
    }
    entity Definition{
        +partOfSpeech: PartOfSpeech,
        +meaning: String,
        +translation: Translation
        +example: String?,
        +image: String?
    }

    entity Phonetic{
        +audio: String
        +text: String
    }
    entity Translation {
        +text: String
        +note: String?
    }
    WordDefinition ..*Phonetic
    WordDefinition ..*Definition
    Definition ..*Translation

    class FreeDictionaryResource implements DictionaryResource{
        + findWordDefinition(word: String): List<WordDefinition>
    }
    class SkyengDictionaryResource implements DictionaryResource {
        + findWordDefinition(word: String): List<WordDefinition>
    }
    DictionaryResource ..> WordDefinition


    class TelegramWordDefinitionMessageBuilder implements WordDefinitionMessageBuilder{
        #buildMessage(wordDefinition: WordDefinition): String
    }
}




@enduml